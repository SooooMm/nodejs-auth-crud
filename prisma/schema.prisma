generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @unique @default(autoincrement()) @map("id")
  email     String   @unique @map("email")
  password  String   @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  userInfos UserInfos?
  resumes Resumes[]
  resumeHistories ResumesHistories[]
  refreshToken RefreshToken?
  @@map("Users")
}

model UserInfos {
  id        Int      @id @default(autoincrement()) @map("id")
  userId    Int      @unique @map("userId")
  name      String   @map("name")
  role      UserRole @default(APPLICANT) @map("role") 
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  user Users @relation(fields: [userId],references: [id],onDelete: Cascade)
  @@map("UserInfos")
}

enum UserRole {
  APPLICANT
  RECRUITER
}

model Resumes {
  id        Int      @id @default(autoincrement()) @map("id")
  userId    Int      @map("userId")
  title     String   @map("title")
  summary   String   @db.Text @map("summary")
  status    ResumeStatus  @default(APPLY) @map("status")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  user Users @relation(fields: [userId],references: [id],onDelete: Cascade)
  resumeHistories ResumesHistories[]
  @@map("Resumes")
}

enum ResumeStatus {
  APPLY
  DROP
  PASS
  INTERVIEW1
  INTERVIEW2
  FINAL_PASS
}

model ResumesHistories {
  id        Int      @id @default(autoincrement()) @map("id")
  userId    Int      @map("userId")
  resumeId  Int      @map("resumeId")
  oldValue  String   @map("oldValue")
  newValue  String   @map("newValue")
  reason    String   @map("reason")
  createdAt DateTime @default(now()) @map("createdAt")

  user Users @relation(fields: [userId],references: [id],onDelete: Cascade)
  resume Resumes @relation(fields: [resumeId],references: [id],onDelete: Cascade)
  @@map("ResumesHistories")
}

model RefreshToken {
  id        Int      @id @default(autoincrement()) @map("id")
  userId    Int      @unique @map("user_Id")
  refreshToken     String   @map("refresh_token")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user Users @relation(fields: [userId],references: [id])
  @@map("refresh_tokens")
}

